<?php

class hlw_lib_Filter 
{
    private static $num = array(
        array('１', '２', '３', '４', '５', '６', '７', '８', '９'),
        array('一', '二', '三', '四', '五', '六', '七', '八', '九'),
        array('Ⅰ', 'Ⅱ', 'Ⅲ', 'Ⅳ', 'Ⅴ', 'Ⅵ', 'Ⅶ', 'Ⅷ', 'Ⅸ'),
        array('①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨'),
        array('ⅰ', 'ⅱ', 'ⅲ', 'ⅳ', 'ⅴ', 'ⅶ', 'ⅷ', 'ⅸ', 'ix'),
        array('壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'),
        array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'),
        array('(1)', '(2)', '(3)', '(4)', '(5)', '(6)', '(7)', '(8)', '(9)'),
        array('(１)', '(２)', '(３)', '(４)', '(５)', '(６)', '(７)', '(８)', '(９)'),
        array('(一)', '(二)', '(三)', '(四)', '(五)', '(六)', '(七)', '(八)', '(九)'),
        array('(Ⅰ)', '(Ⅱ)', '(Ⅲ)', '(Ⅳ)', '(Ⅴ)', '(Ⅵ)', '(Ⅶ)', '(Ⅷ)', '(Ⅸ)'),
        array('(①)', '(②)', '(③)', '(④)', '(⑤)', '(⑥)', '(⑦)', '(⑧)', '(⑨)'),
        array('(ⅰ)', '(ⅱ)', '(ⅲ)', '(ⅳ)', '(ⅴ)', '(ⅶ)', '(ⅷ)', '(ⅸ)', '(ix)'),
        array('(壹)', '(贰)', '(叁)', '(肆)', '(伍)', '(陆)', '(柒)', '(捌)', '(玖)'),
        array('(one)', '(two)', '(three)', '(four)', '(five)', '(six)', '(seven)', '(eight)', '(nine)'),
        array('（1）', '（2）', '（3）', '（4）', '（5）', '（6）', '（7）', '（8）', '（9）'),
        array('（１）', '（２）', '（３）', '（４）', '（５）', '（６）', '（７）', '（８）', '（９）'),
        array('（一）', '（二）', '（三）', '（四）', '（五）', '（六）', '（七）', '（八）', '（九）'),
        array('（Ⅰ）', '（Ⅱ）', '（Ⅲ）', '（Ⅳ）', '（Ⅴ）', '（Ⅵ）', '（Ⅶ）', '（Ⅷ）', '（Ⅸ）'),
        array('（①）', '（②）', '（③）', '（④）', '（⑤）', '（⑥）', '（⑦）', '（⑧）', '（⑨）'),
        array('（ⅰ）', '（ⅱ）', '（ⅲ）', '（ⅳ）', '（ⅴ）', '（ⅶ）', '（ⅷ）', '（ⅸ）', '（ix）'),
        array('（壹）', '（贰）', '（叁）', '（肆）', '（伍）', '（陆）', '（柒）', '（捌）', '（玖）'),
        array('（one）', '（two）', '（three）', '（four）', '（five）', '（six）', '（seven）', '（eight）', '（nine）'),
        array('【１】', '【２】', '【３】', '【４】', '【５】', '【６】', '【７】', '【８】', '【９】'),
        array('【一】', '【二】', '【三】', '【四】', '【五】', '【六】', '【七】', '【八】', '【九】'),
        array('【Ⅰ】', '【Ⅱ】', '【Ⅲ】', '【Ⅳ】', '【Ⅴ】', '【Ⅵ】', '【Ⅶ】', '【Ⅷ】', '【Ⅸ】'),
        array('【①】', '【②】', '【③】', '【④】', '【⑤】', '【⑥】', '【⑦】', '【⑧】', '【⑨】'),
        array('【ⅰ】', '【ⅱ】', '【ⅲ】', '【ⅳ】', '【ⅴ】', '【ⅶ】', '【ⅷ】', '【ⅸ】', '【ix】'),
        array('【壹】', '【贰】', '【叁】', '【肆】', '【伍】', '【陆】', '【柒】', '【捌】', '【玖】'),
        array('【one】', '【two】', '【three】', '【four】', '【five】', '【six】', '【seven】', '【eight】', '【nine】'),
        array('【1】', '【2】', '【3】', '【4】', '【5】', '【6】', '【7】', '【8】', '【9】'),
        array('{１}', '{２}', '{３}', '{４}', '{５}', '{６}', '{７}', '{８}', '{９}'),
        array('{一}', '{二}', '{三}', '{四}', '{五}', '{六}', '{七}', '{八}', '{九}'),
        array('{Ⅰ}', '{Ⅱ}', '{Ⅲ}', '{Ⅳ}', '{Ⅴ}', '{Ⅵ}', '{Ⅶ}', '{Ⅷ}', '{Ⅸ}'),
        array('{①}', '{②}', '{③}', '{④}', '{⑤}', '{⑥}', '{⑦}', '{⑧}', '{⑨}'),
        array('{ⅰ}', '{ⅱ}', '{ⅲ}', '{ⅳ}', '{ⅴ}', '{ⅶ}', '{ⅷ}', '{ⅸ}', '{ix}'),
        array('{壹}', '{贰}', '{叁}', '{肆}', '{伍}', '{陆}', '{柒}', '{捌}', '{玖}'),
        array('{one}', '{two}', '{three}', '{four}', '{five}', '{six}', '{seven}', '{eight}', '{nine}'),
        array('{1}', '{2}', '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}'),
        array('[１]', '[２]', '[３]', '[４]', '[５]', '[６]', '[７]', '[８]', '[９]'),
        array('[一]', '[二]', '[三]', '[四]', '[五]', '[六]', '[七]', '[八]', '[九]'),
        array('[Ⅰ]', '[Ⅱ]', '[Ⅲ]', '[Ⅳ]', '[Ⅴ]', '[Ⅵ]', '[Ⅶ]', '[Ⅷ]', '[Ⅸ]'),
        array('[①]', '[②]', '[③]', '[④]', '[⑤]', '[⑥]', '[⑦]', '[⑧]', '[⑨]'),
        array('[ⅰ]', '[ⅱ]', '[ⅲ]', '[ⅳ]', '[ⅴ]', '[ⅶ]', '[ⅷ]', '[ⅸ]', '[ix]'),
        array('[壹]', '[贰]', '[叁]', '[肆]', '[伍]', '[陆]', '[柒]', '[捌]', '[玖]'),
        array('[one]', '[two]', '[three]', '[four]', '[five]', '[six]', '[seven]', '[eight]', '[nine]'),
        array('[1]', '[2]', '[3]', '[4]', '[5]', '[6]', '[7]', '[8]', '[9]'),
        array('《１》', '《２》', '《３》', '《４》', '《５》', '《６》', '《７》', '《８》', '《９》'),
        array('《一》', '《二》', '《三》', '《四》', '《五》', '《六》', '《七》', '《八》', '《九》'),
        array('《Ⅰ》', '《Ⅱ》', '《Ⅲ》', '《Ⅳ》', '《Ⅴ》', '《Ⅵ》', '《Ⅶ》', '《Ⅷ》', '《Ⅸ》'),
        array('《①》', '《②》', '《③》', '《④》', '《⑤》', '《⑥》', '《⑦》', '《⑧》', '《⑨》'),
        array('《ⅰ》', '《ⅱ》', '《ⅲ》', '《ⅳ》', '《ⅴ》', '《ⅶ》', '《ⅷ》', '《ⅸ》', '《ix》'),
        array('《壹》', '《贰》', '《叁》', '《肆》', '《伍》', '《陆》', '《柒》', '《捌》', '《玖》'),
        array('《one》', '《two》', '《three》', '《four》', '《five》', '《six》', '《seven》', '《eight》', '《nine》'),
        array('《1》', '《2》', '《3》', '《4》', '《5》', '《6》', '《7》', '《8》', '《9》'),
        array('<１>', '<２>', '<３>', '<４>', '<５>', '<６>', '<７>', '<８>', '<９>'),
        array('<一>', '<二>', '<三>', '<四>', '<五>', '<六>', '<七>', '<八>', '<九>'),
        array('<Ⅰ>', '<Ⅱ>', '<Ⅲ>', '<Ⅳ>', '<Ⅴ>', '<Ⅵ>', '<Ⅶ>', '<Ⅷ>', '<Ⅸ>'),
        array('<①>', '<②>', '<③>', '<④>', '<⑤>', '<⑥>', '<⑦>', '<⑧>', '<⑨>'),
        array('<ⅰ>', '<ⅱ>', '<ⅲ>', '<ⅳ>', '<ⅴ>', '<ⅶ>', '<ⅷ>', '<ⅸ>', '<ix>'),
        array('<壹>', '<贰>', '<叁>', '<肆>', '<伍>', '<陆>', '<柒>', '<捌>', '<玖>'),
        array('<one>', '<two>', '<three>', '<four>', '<five>', '<six>', '<seven>', '<eight>', '<nine>'),
        array('<1>', '<2>', '<3>', '<4>', '<5>', '<6>', '<7>', '<8>', '<9>')
    );

    /**
     * IsMail函数:检测是否为邮件
     * @return bool 
     */
    public static function IsMail($mail)
    {
        $exp = "/^[a-z'0-9]+([._-][a-z'0-9]+)*@([a-z0-9]+([._-][a-z0-9]+))+$/";
        if (preg_match($exp, $mail)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * IsMail函数:检测是否为邮件
     * @return  bool 
     */
    public static function IsPhone($phone)
    {
        $phone = self::turnNum($phone);
        $exp = '/^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/';
        if (preg_match($exp, $phone)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * IsMail函数:检测是否为邮件
     * @return bool 
     */
    public static function IsMobile($mobile) 
    {
        $mobile = self::turnNum($mobile);
        $exp = '/13[0-9]{9}|15[0|1|2|3|5|6|7|8|9]\d{8}|18[0|1|5|6|7|8|9]\d{8}/';
        if (preg_match($exp, $mobile)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * IsMail函数:检测是否为邮件
     * @return bool 
     */
    public static function IsQQ($qq)
    {
        $qq = self::turnNum($qq);
        $exp = '/[1-9][0-9]{4,}/';
        if (preg_match($exp, $qq)) {
            return true;
        } else {
            return false;
        }
    }

    public static function turnNum($str) 
    {
        $str = str_replace('十', '10', $str);
        $str = str_replace('X', '10', $str);
        $str = str_replace('⑩', '10', $str);
        $str = str_replace('ⅹ', '10', $str);
        $str = str_replace('拾', '10', $str);
        $str = str_replace('ten', '10', $str);
        $str = str_replace('〇', '0', $str);
        $str = str_replace('零', '0', $str);
        $str = str_replace('zero', '0', $str);
        $str = str_replace('０', '0', $str);


        $count = count(self::$num[0]);
        $j = 1;
        for ($i = 0; $i < $count; $i++) {
            for ($a = 0; $a < count(self::$num); $a++)
                $str = str_replace(self::$num[$a][$i], $j, $str);
            $j += 1;
        }
        return $str;
    }

}

?>
